{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems. It has forked it in 2007 in order to provide support for 64 bits and new APIs. It has since then gained widespread use and distribution. The development and community are very active and welcoming with new contributors every month and simple installers. Headers, Libraries and Runtime More than a million lines of headers are provided, not counting generated ones, and regularly expanded to track new Windows APIs. Everything needed for linking and running your code on Windows. Winpthreads, a pthreads library for C++11 threading support and simple integration with existing project. Winstorecompat, a work-in-progress convenience library that eases conformance with the Windows Store. Better-conforming and faster math support compared to VisualStudio's. Tools gendef: generate Visual Studio .def files from .dll files. genidl: generate .idl files from .dll files. widl: compile .idl files. Friend projects Mingw-w64 interacts a lot with other projects in order to help everyone move forward. Contributions have been going to and coming from these projects: Cygwin ReactOS Wine Some Projects using Mingw-w64 Fedora cross-compiler Npackd OpenSUSE Win-builds Barchart-UDT Blender Boost Botan Ceemple Code::Blocks DAE Tools devkitPro Disk Based HashTables Ecere SDK Ekiga Emerge Desktop Enlightenment Factor FFmpeg FLTK Freecell Solver Freeverb3 GCC: The GNU Compiler Collection GDB: The GNU Project Debugger GIMP GNU Binutils GNU SASL GnuTLS GraphicsMagick GTK+ Hexen II: Hammer of Thyrion iAuxSoft ImageMagick JPen KDE Software Collection libav LibreOffice libsndfile libvirt libvpx Libxml2 MAME (Yes, the arcade emulator!) ManKai Common Lisp mCtrl mpg123 MPIR MS MPI (repackaged) MS MPI OCaml OpenFOAM OpenLisp OpenSC OpenSSL OpenTURNS Perl (5.12.0 and later) PostgreSQL pthreads PToolsWin QEMU Qt QuakeSpasm ReMooD SBC Archiver Smart Image Denoiser smartmontools Strawberry Perl (bundles C toolchains) strongSwan The R Project for Statistical Computing Tomahawk Player VideoLAN VLC VSXu Woo wxPerl PPMs wxWidgets YafaRay zlib","title":"Overview"},{"location":"#overview","text":"Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems. It has forked it in 2007 in order to provide support for 64 bits and new APIs. It has since then gained widespread use and distribution. The development and community are very active and welcoming with new contributors every month and simple installers.","title":"Overview"},{"location":"#headers-libraries-and-runtime","text":"More than a million lines of headers are provided, not counting generated ones, and regularly expanded to track new Windows APIs. Everything needed for linking and running your code on Windows. Winpthreads, a pthreads library for C++11 threading support and simple integration with existing project. Winstorecompat, a work-in-progress convenience library that eases conformance with the Windows Store. Better-conforming and faster math support compared to VisualStudio's.","title":"Headers, Libraries and Runtime"},{"location":"#tools","text":"gendef: generate Visual Studio .def files from .dll files. genidl: generate .idl files from .dll files. widl: compile .idl files.","title":"Tools"},{"location":"#friend-projects","text":"Mingw-w64 interacts a lot with other projects in order to help everyone move forward. Contributions have been going to and coming from these projects: Cygwin ReactOS Wine","title":"Friend projects"},{"location":"#some-projects-using-mingw-w64","text":"Fedora cross-compiler Npackd OpenSUSE Win-builds Barchart-UDT Blender Boost Botan Ceemple Code::Blocks DAE Tools devkitPro Disk Based HashTables Ecere SDK Ekiga Emerge Desktop Enlightenment Factor FFmpeg FLTK Freecell Solver Freeverb3 GCC: The GNU Compiler Collection GDB: The GNU Project Debugger GIMP GNU Binutils GNU SASL GnuTLS GraphicsMagick GTK+ Hexen II: Hammer of Thyrion iAuxSoft ImageMagick JPen KDE Software Collection libav LibreOffice libsndfile libvirt libvpx Libxml2 MAME (Yes, the arcade emulator!) ManKai Common Lisp mCtrl mpg123 MPIR MS MPI (repackaged) MS MPI OCaml OpenFOAM OpenLisp OpenSC OpenSSL OpenTURNS Perl (5.12.0 and later) PostgreSQL pthreads PToolsWin QEMU Qt QuakeSpasm ReMooD SBC Archiver Smart Image Denoiser smartmontools Strawberry Perl (bundles C toolchains) strongSwan The R Project for Statistical Computing Tomahawk Player VideoLAN VLC VSXu Woo wxPerl PPMs wxWidgets YafaRay zlib","title":"Some Projects using Mingw-w64"},{"location":"changelog/","text":"Changelog v9.0.0: 2021-05-22 Notable changes: UCRT updates by Biswapriyo Nath Wine updates by Jacek Caban Various new and updated API headers by Biswapriyo Nath and Liu Hao Various UCRT and MSVCRT fixes by Martin Storsj\u00f6 at_quick_exit implementation by Martin Storsj\u00f6 dism API by Biswapriyo Nath idl fixes by Steve Lhomme Winpthreads fixes by Liu Hao gettimeofday precision increase by Christian Franke v8.0.0: 2020-09-18 Notable changes: New Hyper-V headers and libraries by Biswapriyo Nath Many headers updated from Wine by Jacek Caban. ARM math improvements by Martin Storsj\u00f6 floating point fixes by Liu Hao many *printf compatibility fixes by Liu Hao and Martin Storsj\u00f6 massive Windows App Store API updates by Steve Lhomme winstorecompat library updates by Martin Storsj\u00f6 USE_MINGW_ANSI_STDIO now automatically enabled in C99 and C11mode when not using UCRT by Pali Roh\u00e1r wdm and ddk updates by Zebediah Figura UCRT for Windows Store Apps (-lucrtapp) by Martin Storsj\u00f6 Audioclient and ActivateAudioInterfaceAsync API updates by Liu Hao DirectX SDKs are now always installed v7.0.0: 2019-11-10 Notable changes: _FORTIFY_SOURCE support thanks to Christian Franke. Lots of math fixes from Martin Storsj\u00f6. Many headers updated from Wine by Jacek Caban. UCRT support by Martin Storsj\u00f6. And many other additions thanks to, but not limited to (in Alphabetical order) Alexey Pavlov, Antoine C\u0153ur, Biswapriyo Nath, Chris Charabaruk, Christian Franke, Hugo Beauz\u00e9e-Luyssen, Jacek Caban, James Ross-Gowan, Johannes Pfau, Kai Tietz, Liu Hao, Marisa-Chan, Martin Storsj\u00f6, Marvin Scholz, Mateusz Brzostek, Matthew Palermo, Nikolay Sivov, Pierre Lamot, Richard Pospesel, Ruslan Garipov, sezero, SquallATF, Steve Lhomme, Tom\u00e1\u0161 Golembiovsk\u00fd, Tom Ritter, xnor, Zach Bacon, Zebediah Figura, \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432 v6.0.0: 2018-09-17 Notable changes: C++ __cxa_atexit thanks to Martin Storsj\u00f6 and Liu Hao Massive additions to support UCRT thanks to Martin Storsj\u00f6 Sync COM interface headers with Wine development thanks to Jacek Caban WinRT additions thanks to Hugo Beauz\u00e9e-Luyssen ARM32 and ARM64 additions thanks to Martin Storsj\u00f6 CRT library api-ms-win-core additions thanks to Martin Storsj\u00f6 CRT library def file reorganization thanks to Martin Storsj\u00f6 And many other additions thanks to, but not limited to (in Alphabetical order) Alexey Pavlov Alon Bar-Lev Andr\u00e9 Hentschel Arthur Edelstein Corinna Vinschen David Grayson David Wohlferd Ebrahim Byagowi Guy Helmer Hugo Beauz\u00e9e-Luyssen Ihsan Akmal Jacek Caban James Ross-Gowan Jean-Baptiste Kempf Jonathan Yong Jon Turney Kai Tietz Liu Hao Martell Malone Martin Storsj\u00f6 Mateusz Matheus Izvekov mati865 Micha\u0142 Janiszewski Nikolay Sivov niXman Petri Hodju Ray Donnelly Ruben Van Boxem Ruslan Garipov Samuel D. Leslie sezero Soar Qin Tamar Christina Tamir Duberstein Tim Hutt Tom Ritter Yuta Nakai \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u0430\u0432\u043b\u043e\u0432 \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432 \u5b8b\u51ac\u751f v5.0.4: 2018-06-04 Fix gcc-8.1.0 compatibility regarding _xgetbv %e printf specifier will now produce at least 2 digits for the exponent. v5.0.3: 2017-11-04 pseudo-reloc will now try to restore page protection settings prior to manipulating it, rather than simply assuming it was read-only with execute. winpthreads: Fix undefined __divmoddi4 when compiling with newly bootstrapped gcc-7 Fixed modf family segfault due to eax clobbering. v5.0.2: 2017-03-28 RegSetKeyValueW now has proper wide arguments. Fix some crashes in winpthreads due to misaligned memory access when used with some SSE instructions. Fix pdh.h function calls to have proper stdcall decorators. v5.0.1: 2017-01-06 Don't use feature (__attribute__((gcc_struct))) that isn't supported on clang when compiling on clang thanks to David Wohlferd. Various ARM math fixes thanks to Martin Storsj\u00f6 Removed some duplicate uuids defintions, thanks to HugoBeauz\u00e9e-Luyssen. Define IN6_IS_ADDR_ macros to conform to Posix Specm thanks toJean-Baptiste Kempf dxva.h: Add support for VP8/9 in DxVA2 thanks to Yuta Nakai v5.0.0: 2016-10-19 Fixes to the __mingw_printf family of functions. DirectX updates from Wine. Various updates to support Windows 7 and 10. Various header typo fixes. v4 32bit ARM thumb software math (Thanks to Andr\u00e9 Hentschel!). New ftw() support for gcc-5.x support. Experimental printf changes - Ability to print 128bit integers (%I128*) and Decimal Floats (%H, %D), disabled by default. Build the CRT with --enable-experimental to use. Updated OpenGL 4.5 headers. Better DirectX 11 support. Better Windows 7, 8/8.1 API support. v3 Required for GCC 4.8. Much improved floating point math performance. Improved MSVC intrinsics performance. Addition of wide variants in C99 printf and scanf. Partial C1X secure CRT support. Partial MS Secure CRT templates for C++. Vastly improved Windows 7 and 8 win32 API support. POSIX-style Large File Support. Winpthread: new library, pthreads implementation for Windows. Winstorecompat: new library for Windows Store compatibility (WIP). v2 Expanded Windows Vista/7 API support.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v900-2021-05-22","text":"Notable changes: UCRT updates by Biswapriyo Nath Wine updates by Jacek Caban Various new and updated API headers by Biswapriyo Nath and Liu Hao Various UCRT and MSVCRT fixes by Martin Storsj\u00f6 at_quick_exit implementation by Martin Storsj\u00f6 dism API by Biswapriyo Nath idl fixes by Steve Lhomme Winpthreads fixes by Liu Hao gettimeofday precision increase by Christian Franke","title":"v9.0.0: 2021-05-22"},{"location":"changelog/#v800-2020-09-18","text":"Notable changes: New Hyper-V headers and libraries by Biswapriyo Nath Many headers updated from Wine by Jacek Caban. ARM math improvements by Martin Storsj\u00f6 floating point fixes by Liu Hao many *printf compatibility fixes by Liu Hao and Martin Storsj\u00f6 massive Windows App Store API updates by Steve Lhomme winstorecompat library updates by Martin Storsj\u00f6 USE_MINGW_ANSI_STDIO now automatically enabled in C99 and C11mode when not using UCRT by Pali Roh\u00e1r wdm and ddk updates by Zebediah Figura UCRT for Windows Store Apps (-lucrtapp) by Martin Storsj\u00f6 Audioclient and ActivateAudioInterfaceAsync API updates by Liu Hao DirectX SDKs are now always installed","title":"v8.0.0: 2020-09-18"},{"location":"changelog/#v700-2019-11-10","text":"Notable changes: _FORTIFY_SOURCE support thanks to Christian Franke. Lots of math fixes from Martin Storsj\u00f6. Many headers updated from Wine by Jacek Caban. UCRT support by Martin Storsj\u00f6. And many other additions thanks to, but not limited to (in Alphabetical order) Alexey Pavlov, Antoine C\u0153ur, Biswapriyo Nath, Chris Charabaruk, Christian Franke, Hugo Beauz\u00e9e-Luyssen, Jacek Caban, James Ross-Gowan, Johannes Pfau, Kai Tietz, Liu Hao, Marisa-Chan, Martin Storsj\u00f6, Marvin Scholz, Mateusz Brzostek, Matthew Palermo, Nikolay Sivov, Pierre Lamot, Richard Pospesel, Ruslan Garipov, sezero, SquallATF, Steve Lhomme, Tom\u00e1\u0161 Golembiovsk\u00fd, Tom Ritter, xnor, Zach Bacon, Zebediah Figura, \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432","title":"v7.0.0: 2019-11-10"},{"location":"changelog/#v600-2018-09-17","text":"Notable changes: C++ __cxa_atexit thanks to Martin Storsj\u00f6 and Liu Hao Massive additions to support UCRT thanks to Martin Storsj\u00f6 Sync COM interface headers with Wine development thanks to Jacek Caban WinRT additions thanks to Hugo Beauz\u00e9e-Luyssen ARM32 and ARM64 additions thanks to Martin Storsj\u00f6 CRT library api-ms-win-core additions thanks to Martin Storsj\u00f6 CRT library def file reorganization thanks to Martin Storsj\u00f6 And many other additions thanks to, but not limited to (in Alphabetical order) Alexey Pavlov Alon Bar-Lev Andr\u00e9 Hentschel Arthur Edelstein Corinna Vinschen David Grayson David Wohlferd Ebrahim Byagowi Guy Helmer Hugo Beauz\u00e9e-Luyssen Ihsan Akmal Jacek Caban James Ross-Gowan Jean-Baptiste Kempf Jonathan Yong Jon Turney Kai Tietz Liu Hao Martell Malone Martin Storsj\u00f6 Mateusz Matheus Izvekov mati865 Micha\u0142 Janiszewski Nikolay Sivov niXman Petri Hodju Ray Donnelly Ruben Van Boxem Ruslan Garipov Samuel D. Leslie sezero Soar Qin Tamar Christina Tamir Duberstein Tim Hutt Tom Ritter Yuta Nakai \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u0430\u0432\u043b\u043e\u0432 \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432 \u5b8b\u51ac\u751f","title":"v6.0.0: 2018-09-17"},{"location":"changelog/#v504-2018-06-04","text":"Fix gcc-8.1.0 compatibility regarding _xgetbv %e printf specifier will now produce at least 2 digits for the exponent.","title":"v5.0.4: 2018-06-04"},{"location":"changelog/#v503-2017-11-04","text":"pseudo-reloc will now try to restore page protection settings prior to manipulating it, rather than simply assuming it was read-only with execute. winpthreads: Fix undefined __divmoddi4 when compiling with newly bootstrapped gcc-7 Fixed modf family segfault due to eax clobbering.","title":"v5.0.3: 2017-11-04"},{"location":"changelog/#v502-2017-03-28","text":"RegSetKeyValueW now has proper wide arguments. Fix some crashes in winpthreads due to misaligned memory access when used with some SSE instructions. Fix pdh.h function calls to have proper stdcall decorators.","title":"v5.0.2: 2017-03-28"},{"location":"changelog/#v501-2017-01-06","text":"Don't use feature (__attribute__((gcc_struct))) that isn't supported on clang when compiling on clang thanks to David Wohlferd. Various ARM math fixes thanks to Martin Storsj\u00f6 Removed some duplicate uuids defintions, thanks to HugoBeauz\u00e9e-Luyssen. Define IN6_IS_ADDR_ macros to conform to Posix Specm thanks toJean-Baptiste Kempf dxva.h: Add support for VP8/9 in DxVA2 thanks to Yuta Nakai","title":"v5.0.1: 2017-01-06"},{"location":"changelog/#v500-2016-10-19","text":"Fixes to the __mingw_printf family of functions. DirectX updates from Wine. Various updates to support Windows 7 and 10. Various header typo fixes.","title":"v5.0.0: 2016-10-19"},{"location":"changelog/#v4","text":"32bit ARM thumb software math (Thanks to Andr\u00e9 Hentschel!). New ftw() support for gcc-5.x support. Experimental printf changes - Ability to print 128bit integers (%I128*) and Decimal Floats (%H, %D), disabled by default. Build the CRT with --enable-experimental to use. Updated OpenGL 4.5 headers. Better DirectX 11 support. Better Windows 7, 8/8.1 API support.","title":"v4"},{"location":"changelog/#v3","text":"Required for GCC 4.8. Much improved floating point math performance. Improved MSVC intrinsics performance. Addition of wide variants in C99 printf and scanf. Partial C1X secure CRT support. Partial MS Secure CRT templates for C++. Vastly improved Windows 7 and 8 win32 API support. POSIX-style Large File Support. Winpthread: new library, pthreads implementation for Windows. Winstorecompat: new library for Windows Store compatibility (WIP).","title":"v3"},{"location":"changelog/#v2","text":"Expanded Windows Vista/7 API support.","title":"v2"},{"location":"contribute/","text":"Contribute Mingw-w64 and the ecosystem surrounding it are stable and with many features. There are however some topics for which developer-time has been scarce. This page lists tasks that are relatively simple and can be worked on without the need for a huge background while still being important and high on the wish-lists of users. In order to avoid duplicate efforts, if you take on one of these tasks, please mention it on the mailing-list . The tasks below have been split enough to be simple and fairly well-contained while still being useful on their own. Most could be internship topics. There are references to other websites on this page; their presence does not constitute an endorsement in any way. Win32 API and Runtime Mingw-w64 is constantly looking for updates to its win32 API headers from MSDN Library . If you believe you have found an API that is not available in Mingw-w64 but is documented as part of MSDN or a mistake in Mingw-w64, please do not hesitate to contact us through the mailing-list . For patch submissions, please remember to use sign-off your git commits before submitting the patches to the mailing-list . Both git send-email and git format-patch forms are allowed. From past experiences however, if you do use an email client to attach individual patches, please use the .txt extension, especially for Google Mail users so the patch does not get treated as a binary. SEH for 32bits The patent for SEH for 32bits has now expired and while new computers are all 64 bits, Intel has continued selling Atom CPUs that only handled 32 bits very late and some applications are still 32 bits. Projects such as Wine and ReactOS will also benefit from 32bits SEH. Overall the need is still there and will continue for years to come and will outlast Microsoft's support for 32bits. Note that you will need FSF paperwork since the work has to be done inside GCC. Check CC's page on contributing. The now-expired patent on SEH A Crash Course on the Depths of Win32\u2122 Structured Exception Handling Win32 Exceptions \u2013 OS Level Point of View How a C++ compiler implements exception handling Structured Exception Handling Basics Windows' SEH and C++ Exception Handling Structured Exception Handling Considered Harmful SEH and C++ Exceptions - catch all in one GCC sources and unwind-seh.c in particular. Note that 32-bit SEH is stack-based and requires code-generation unlike 64bits SEH which is simply table-based (that difference explains why the patent only mattered to 32bits). Sanitizers (ASAN, TSAN, USAN) Sanitizers are runtime checks for a number of situations which have usually required instrumentation with tools that cause an important slowdown (like Valgrind). They are relatively new and much lighter than other approaches. Thorough Status Report for Sanitizers (asan, tsan, usan) ASAN, TSAN and USAN are great technologies which are available in GCC. Unfortunately they are not completely usable on Windows. A proper review and tests are needed before anything. Fixing remaining bits in asan, tsan or usan (see above) Once a report on the status is available, work on it can be started. Link-Time Optimization (LTO) Optimizations in C cannot cross compilation units and many of them are therefore missed in large applications and when using libraries. LTO runs some optimizations during linking, when the toolchain can see all the objects at once and run cross-unit optimizations. Thorough Status Report for LTO LTO has recently been improved a lot in GCC and binutils. There are still some issues on Windows though. The first step to making it work is to get a proper and up-to-date test and to identify the platform-specific bugs. Fixing remaining bits in LTO Fix the issues found by the status report from above. The actual bug list will be updated as it becomes available. Compiler plugin for Visual Studio A compiler plugin would make GCC, binutils tools and GDB available from the Visual Studio IDE. Most people state they stick with VS because of the IDE; such a plugin would allow mixing the two. VisualGDB (commercial) provides such a plugin, apparently meant for compiling to micro-controllers and Linux (Android or not). Debug Infos PDB is the file-format used by Microsoft to store debug info. Unfortunately it is undocumented. Documentation of the PDB file-format Since the format is undocumented, first step is to document it. Fortunately, during the past few years, reader and possibly writer code has appeared, mostly out of Microsoft. A library named ''dump_syms'' is available. It can read PDB files at least to some extent. Licensing and origin need to be checked. Microsoft has released Roslyn, a \".NET Compiler Platform\" . It contains a PDB writer implementation . This may be an actual implementation or only an interface to the actual one. It is difficult to say without further analysis. Microsoft has also released CCI Metadata under the MS-PL . It contains PDB reader implementation that should constitute an appropriate source. Creation of PDB files Creating PDB files will allow the Microsoft tools to make meaningful backtraces when code built with free compilers is involved. Handling of PDB in GDB Reading PDB files will allow free tools to make meaningful backtraces when code built with MSVC is involved. Translation from/to PDB Most often debug informations will only be available in a single format. Being able to convert between them when needed will be useful. C11 and C++11 Threading Support C11 Threading and Atomics The C11 standard has a section on threading which is still left unimplemented on several platforms. The API follows pthreads' quite closely and it is left to the implementor to decide whether to base it on winpthreads or directly on the (>= Vista) Win32 API. The final C11 draft is identical to the standard but is available freely. Note that you will need FSF paperwork since the work has to be done inside GCC. Check GCC's page on contributing . Implementation of C11 and C++11 Threading Support Without Winpthreads mcfgthread The mcfgthread library aims at providing an efficient implementation of thread support for GCC that is required by the C11 and C++11 standard. It uses a lot of undocumented Windows NT syscalls to ensure performance. Its introduction and manual can be found from its wiki pages .","title":"Contribute"},{"location":"contribute/#contribute","text":"Mingw-w64 and the ecosystem surrounding it are stable and with many features. There are however some topics for which developer-time has been scarce. This page lists tasks that are relatively simple and can be worked on without the need for a huge background while still being important and high on the wish-lists of users. In order to avoid duplicate efforts, if you take on one of these tasks, please mention it on the mailing-list . The tasks below have been split enough to be simple and fairly well-contained while still being useful on their own. Most could be internship topics. There are references to other websites on this page; their presence does not constitute an endorsement in any way.","title":"Contribute"},{"location":"contribute/#win32-api-and-runtime","text":"Mingw-w64 is constantly looking for updates to its win32 API headers from MSDN Library . If you believe you have found an API that is not available in Mingw-w64 but is documented as part of MSDN or a mistake in Mingw-w64, please do not hesitate to contact us through the mailing-list . For patch submissions, please remember to use sign-off your git commits before submitting the patches to the mailing-list . Both git send-email and git format-patch forms are allowed. From past experiences however, if you do use an email client to attach individual patches, please use the .txt extension, especially for Google Mail users so the patch does not get treated as a binary.","title":"Win32 API and Runtime"},{"location":"contribute/#seh-for-32bits","text":"The patent for SEH for 32bits has now expired and while new computers are all 64 bits, Intel has continued selling Atom CPUs that only handled 32 bits very late and some applications are still 32 bits. Projects such as Wine and ReactOS will also benefit from 32bits SEH. Overall the need is still there and will continue for years to come and will outlast Microsoft's support for 32bits. Note that you will need FSF paperwork since the work has to be done inside GCC. Check CC's page on contributing. The now-expired patent on SEH A Crash Course on the Depths of Win32\u2122 Structured Exception Handling Win32 Exceptions \u2013 OS Level Point of View How a C++ compiler implements exception handling Structured Exception Handling Basics Windows' SEH and C++ Exception Handling Structured Exception Handling Considered Harmful SEH and C++ Exceptions - catch all in one GCC sources and unwind-seh.c in particular. Note that 32-bit SEH is stack-based and requires code-generation unlike 64bits SEH which is simply table-based (that difference explains why the patent only mattered to 32bits).","title":"SEH for 32bits"},{"location":"contribute/#sanitizers-asan-tsan-usan","text":"Sanitizers are runtime checks for a number of situations which have usually required instrumentation with tools that cause an important slowdown (like Valgrind). They are relatively new and much lighter than other approaches.","title":"Sanitizers (ASAN, TSAN, USAN)"},{"location":"contribute/#thorough-status-report-for-sanitizers-asan-tsan-usan","text":"ASAN, TSAN and USAN are great technologies which are available in GCC. Unfortunately they are not completely usable on Windows. A proper review and tests are needed before anything.","title":"Thorough Status Report for Sanitizers (asan, tsan, usan)"},{"location":"contribute/#fixing-remaining-bits-in-asan-tsan-or-usan-see-above","text":"Once a report on the status is available, work on it can be started.","title":"Fixing remaining bits in asan, tsan or usan (see above)"},{"location":"contribute/#link-time-optimization-lto","text":"Optimizations in C cannot cross compilation units and many of them are therefore missed in large applications and when using libraries. LTO runs some optimizations during linking, when the toolchain can see all the objects at once and run cross-unit optimizations.","title":"Link-Time Optimization (LTO)"},{"location":"contribute/#thorough-status-report-for-lto","text":"LTO has recently been improved a lot in GCC and binutils. There are still some issues on Windows though. The first step to making it work is to get a proper and up-to-date test and to identify the platform-specific bugs.","title":"Thorough Status Report for LTO"},{"location":"contribute/#fixing-remaining-bits-in-lto","text":"Fix the issues found by the status report from above. The actual bug list will be updated as it becomes available.","title":"Fixing remaining bits in LTO"},{"location":"contribute/#compiler-plugin-for-visual-studio","text":"A compiler plugin would make GCC, binutils tools and GDB available from the Visual Studio IDE. Most people state they stick with VS because of the IDE; such a plugin would allow mixing the two. VisualGDB (commercial) provides such a plugin, apparently meant for compiling to micro-controllers and Linux (Android or not).","title":"Compiler plugin for Visual Studio"},{"location":"contribute/#debug-infos","text":"PDB is the file-format used by Microsoft to store debug info. Unfortunately it is undocumented.","title":"Debug Infos"},{"location":"contribute/#documentation-of-the-pdb-file-format","text":"Since the format is undocumented, first step is to document it. Fortunately, during the past few years, reader and possibly writer code has appeared, mostly out of Microsoft. A library named ''dump_syms'' is available. It can read PDB files at least to some extent. Licensing and origin need to be checked. Microsoft has released Roslyn, a \".NET Compiler Platform\" . It contains a PDB writer implementation . This may be an actual implementation or only an interface to the actual one. It is difficult to say without further analysis. Microsoft has also released CCI Metadata under the MS-PL . It contains PDB reader implementation that should constitute an appropriate source.","title":"Documentation of the PDB file-format"},{"location":"contribute/#creation-of-pdb-files","text":"Creating PDB files will allow the Microsoft tools to make meaningful backtraces when code built with free compilers is involved.","title":"Creation of PDB files"},{"location":"contribute/#handling-of-pdb-in-gdb","text":"Reading PDB files will allow free tools to make meaningful backtraces when code built with MSVC is involved.","title":"Handling of PDB in GDB"},{"location":"contribute/#translation-fromto-pdb","text":"Most often debug informations will only be available in a single format. Being able to convert between them when needed will be useful.","title":"Translation from/to PDB"},{"location":"contribute/#c11-and-c11-threading-support","text":"","title":"C11 and C++11 Threading Support"},{"location":"contribute/#c11-threading-and-atomics","text":"The C11 standard has a section on threading which is still left unimplemented on several platforms. The API follows pthreads' quite closely and it is left to the implementor to decide whether to base it on winpthreads or directly on the (>= Vista) Win32 API. The final C11 draft is identical to the standard but is available freely. Note that you will need FSF paperwork since the work has to be done inside GCC. Check GCC's page on contributing .","title":"C11 Threading and Atomics"},{"location":"contribute/#implementation-of-c11-and-c11-threading-support-without-winpthreads","text":"","title":"Implementation of C11 and C++11 Threading Support Without Winpthreads"},{"location":"contribute/#mcfgthread","text":"The mcfgthread library aims at providing an efficient implementation of thread support for GCC that is required by the C11 and C++11 standard. It uses a lot of undocumented Windows NT syscalls to ensure performance. Its introduction and manual can be found from its wiki pages .","title":"mcfgthread"},{"location":"donate/","text":"Donate Mingw-w64 is almost entirely made by volunteer. Only two employees are paid to contribute to mingw-w64 and even then it's not full-time: we estimate the paid time spent on the project matches 0.5-employee. All other contributions are done on free time. There are many evolutions and features planned but resources are scarce. In particular, if mingw-w64 saves you from the steep cost of proprietary toolchains, think about contributing a bit; you will also most likely quickly benefit from the improvements. Non-financial contributions More than through money, the best way to help the project is to invest man-time in it. The list of tasks on the page about contributing is the best place to start and if you are an employer with trainees, several of these tasks will make good internship. Donations With the current organization and funds of mingw-w64, it wouldn't make sense to try to pay a developer to spend time on specific topics. Instead, the money will be spent on hardware (testing servers, Windows licenses, phone, tablets, ...) and meeting expenses (setting up hackatons and paying for travel expenses as some major mingw-w64 developers live very far from others). Currently, only Paypal is available: Paypal (to Ka\u00ef Tietz) Below is a list of donors, starting from January 2015. We'd like to list all our donors but we value your wishes; please state whether you'd like to have your name, pseudonym or company on the website. James Beard WSoptics GmbH Hardware donations There is no facility at the moment to receive hardware. These donations will have to be handled on a case-by-case basis (mostly to decide where to ship).","title":"Donate"},{"location":"donate/#donate","text":"Mingw-w64 is almost entirely made by volunteer. Only two employees are paid to contribute to mingw-w64 and even then it's not full-time: we estimate the paid time spent on the project matches 0.5-employee. All other contributions are done on free time. There are many evolutions and features planned but resources are scarce. In particular, if mingw-w64 saves you from the steep cost of proprietary toolchains, think about contributing a bit; you will also most likely quickly benefit from the improvements.","title":"Donate"},{"location":"donate/#non-financial-contributions","text":"More than through money, the best way to help the project is to invest man-time in it. The list of tasks on the page about contributing is the best place to start and if you are an employer with trainees, several of these tasks will make good internship.","title":"Non-financial contributions"},{"location":"donate/#donations","text":"With the current organization and funds of mingw-w64, it wouldn't make sense to try to pay a developer to spend time on specific topics. Instead, the money will be spent on hardware (testing servers, Windows licenses, phone, tablets, ...) and meeting expenses (setting up hackatons and paying for travel expenses as some major mingw-w64 developers live very far from others). Currently, only Paypal is available: Paypal (to Ka\u00ef Tietz) Below is a list of donors, starting from January 2015. We'd like to list all our donors but we value your wishes; please state whether you'd like to have your name, pseudonym or company on the website. James Beard WSoptics GmbH","title":"Donations"},{"location":"donate/#hardware-donations","text":"There is no facility at the moment to receive hardware. These donations will have to be handled on a case-by-case basis (mostly to decide where to ship).","title":"Hardware donations"},{"location":"downloads/","text":"Downloads The heart of the Mingw-w64 project is headers and support libraries to run the output of GCC on Windows. Since Mingw-w64 is neither the home of GCC nor of binutils, several sets of installation packages which combine them are available. In addition, the sources are available but most people will want to grab binaries directly.. Pre-built toolchains and packages Version Host GCC / Mingw-w64 Version Languages Additional Software in Package Manager Arch Linux Arch Linux 8.2.0 / 5.0.4 Ada, C, C++, Fortran, Obj-C, Obj-C++ 305+ Cygwin Rolling Windows 5.4.0/5.0.2 Ada, C, C++, Fortran, Obj-C 5 (bzip2, libgcrypt, libgpg-error, minizip, xz, zlib) Debian Debian 7 (Wheezy) 4.6.3/2.0.3 Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml 2 (gdb, nsis) Debian 8 (Jessie) 4.9.1/3.2.0 Debian 9 (Stretch) 6.3.0/5.0.0 9 (gdb, libassuan, libgcrypt, libgpg-error, libksba, libnpth, nsis, win-iconv, zlib) Debian 10 (Buster) 8.3.0/6.0.0 Fedora Fedora 19 4.8.1/? Ada, C, C++, Fortran, Obj-C, Obj-C++ 149+ MacPorts Rolling macOS 8.2.0 / 5.0.4 C, C++, Fortran, Obj-C, Obj-C++ 1 (nsis) MingW-W64-builds Rolling Windows 7.2.0/5.0.3 C, C++, Fortran 4 (gdb, libiconf, python, zlib) Msys2 Rolling Windows 9.2.0 / trunk Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml many Ubuntu 12.04 Precise Pangolin 4.6.3/2.0.1 Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml 2 (nsis, gdb) 14.04 Trusty Tahr 4.8.2/3.1.0 14.10 Utopic Unicorn 4.9.1/3.1.0 15.04 Vivid Vervet 4.9.2/3.2.0 15.10 Wily Werewolf 4.9.2/4.0.2 16.04 Xenial Xerus 5.3.1/4.0.4 3 (nsis, gdb, zlib) Win-Builds 1.5 Windows, Linux 4.8.3/3.3.0 C, C++ 91+ Arch Linux Installation: Community repository (toolchain) AUR repository (additional packages) Ubuntu Installation: through integrated package manager. Mingw-w64 packages on Ubuntu Cygwin Cygwin is a Unix-like environment and command-line interface for Microsoft Windows. Its core is the cygwin1.dll library which provides POSIX functionality on top of the Win32 API. It can be used as a build environment which targets Windows directly and for which output doesn't depend on cygwin1.dll. Installation is done through cygwin's package manager: setup.exe . As part of the numerous packages in cygwin, there are cross-compilation toolchains which target both 32 bits and 64 bits; their names start with \u201cmingw64-\u201d. Once they are installed, they should be used according to the general cross-compilation approach. Debian Installation: through integrated package manager. Mingw-w64 packages on Debian Fedora Installation: through integrated package manager. MacPorts To install just the 32-bit or just 64-bit compiler with dependencies, use: sudo port install i686-w64-mingw32-gcc sudo port install x86_64-w64-mingw32-gcc A shortcut to install both: sudo port install mingw-w64 Here is the list of Mingw-w64 packages on MacPorts . Mingw-builds Installation: Sourceforge MSYS2 Installation: GitHub Win-Builds Win-builds is a cross-platform project that makes building for Windows easy. It supports building from both Windows and Linux systems and provides many pre-built libraries which can be installed through a graphical package manager. It aims for stability while still providing recent versions of software packages. Installation: http://win-builds.org . Sources Tarballs for the mingw-w64 sources are hosted on SourceForge . The latest version from the 6.x series is 6.0.0 . The latest version from the 5.x series is 5.0.4 . The latest version from the 4.x series is 4.0.6 . The latest version from the 3.x series is 3.3.0 . Winpthreads has been merged into the main tarball as of 3.1.0. The old wiki has instructions for building native and cross toolchains. Details on how to get the mingw-w64 code from Git and an Git-web viewer are available on SourceForge . Unsorted complementary list Darwin/Mac OS X The existing Darwin binaries have been built through buildbot in 2013 and links to them can be found on the dedicated page . OpenSUSE The OpenSUSE Linux distribution also has a large and well-maintained set of packages for cross-compilation. Rubenvb Rubenvb has built a number of toolchains including some for less common setups. They are split into two categories: toolchains targeting Win32 or Win64 . GCC with the MCF thread model GCC with the MCF thread model is a series of x86 and x64 native toolchains built by LH_Mouse. The MCF thread model involves the mcfgthread library to provide minimum yet complete C++11 thread support. Disregarding POSIX or Windows XP compatibility, it implements (hopefully the most) efficient mutexes and condition variables that are competitive with even native slim reader/write (SRW) locks and condition variables since Windows Vista. Store of binaries on SourceForge A very large number of other binaries and sources are hosted in the File Release System on Sourceforge which might have what you are after.","title":"Downloads"},{"location":"downloads/#downloads","text":"The heart of the Mingw-w64 project is headers and support libraries to run the output of GCC on Windows. Since Mingw-w64 is neither the home of GCC nor of binutils, several sets of installation packages which combine them are available. In addition, the sources are available but most people will want to grab binaries directly..","title":"Downloads"},{"location":"downloads/#pre-built-toolchains-and-packages","text":"Version Host GCC / Mingw-w64 Version Languages Additional Software in Package Manager Arch Linux Arch Linux 8.2.0 / 5.0.4 Ada, C, C++, Fortran, Obj-C, Obj-C++ 305+ Cygwin Rolling Windows 5.4.0/5.0.2 Ada, C, C++, Fortran, Obj-C 5 (bzip2, libgcrypt, libgpg-error, minizip, xz, zlib) Debian Debian 7 (Wheezy) 4.6.3/2.0.3 Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml 2 (gdb, nsis) Debian 8 (Jessie) 4.9.1/3.2.0 Debian 9 (Stretch) 6.3.0/5.0.0 9 (gdb, libassuan, libgcrypt, libgpg-error, libksba, libnpth, nsis, win-iconv, zlib) Debian 10 (Buster) 8.3.0/6.0.0 Fedora Fedora 19 4.8.1/? Ada, C, C++, Fortran, Obj-C, Obj-C++ 149+ MacPorts Rolling macOS 8.2.0 / 5.0.4 C, C++, Fortran, Obj-C, Obj-C++ 1 (nsis) MingW-W64-builds Rolling Windows 7.2.0/5.0.3 C, C++, Fortran 4 (gdb, libiconf, python, zlib) Msys2 Rolling Windows 9.2.0 / trunk Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml many Ubuntu 12.04 Precise Pangolin 4.6.3/2.0.1 Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml 2 (nsis, gdb) 14.04 Trusty Tahr 4.8.2/3.1.0 14.10 Utopic Unicorn 4.9.1/3.1.0 15.04 Vivid Vervet 4.9.2/3.2.0 15.10 Wily Werewolf 4.9.2/4.0.2 16.04 Xenial Xerus 5.3.1/4.0.4 3 (nsis, gdb, zlib) Win-Builds 1.5 Windows, Linux 4.8.3/3.3.0 C, C++ 91+","title":"Pre-built toolchains and packages"},{"location":"downloads/#arch-linux","text":"Installation: Community repository (toolchain) AUR repository (additional packages)","title":"Arch Linux"},{"location":"downloads/#ubuntu","text":"Installation: through integrated package manager. Mingw-w64 packages on Ubuntu","title":"Ubuntu"},{"location":"downloads/#cygwin","text":"Cygwin is a Unix-like environment and command-line interface for Microsoft Windows. Its core is the cygwin1.dll library which provides POSIX functionality on top of the Win32 API. It can be used as a build environment which targets Windows directly and for which output doesn't depend on cygwin1.dll. Installation is done through cygwin's package manager: setup.exe . As part of the numerous packages in cygwin, there are cross-compilation toolchains which target both 32 bits and 64 bits; their names start with \u201cmingw64-\u201d. Once they are installed, they should be used according to the general cross-compilation approach.","title":"Cygwin"},{"location":"downloads/#debian","text":"Installation: through integrated package manager. Mingw-w64 packages on Debian","title":"Debian"},{"location":"downloads/#fedora","text":"Installation: through integrated package manager.","title":"Fedora"},{"location":"downloads/#macports","text":"To install just the 32-bit or just 64-bit compiler with dependencies, use: sudo port install i686-w64-mingw32-gcc sudo port install x86_64-w64-mingw32-gcc A shortcut to install both: sudo port install mingw-w64 Here is the list of Mingw-w64 packages on MacPorts .","title":"MacPorts"},{"location":"downloads/#mingw-builds","text":"Installation: Sourceforge","title":"Mingw-builds"},{"location":"downloads/#msys2","text":"Installation: GitHub","title":"MSYS2"},{"location":"downloads/#win-builds","text":"Win-builds is a cross-platform project that makes building for Windows easy. It supports building from both Windows and Linux systems and provides many pre-built libraries which can be installed through a graphical package manager. It aims for stability while still providing recent versions of software packages. Installation: http://win-builds.org .","title":"Win-Builds"},{"location":"downloads/#sources","text":"Tarballs for the mingw-w64 sources are hosted on SourceForge . The latest version from the 6.x series is 6.0.0 . The latest version from the 5.x series is 5.0.4 . The latest version from the 4.x series is 4.0.6 . The latest version from the 3.x series is 3.3.0 . Winpthreads has been merged into the main tarball as of 3.1.0. The old wiki has instructions for building native and cross toolchains. Details on how to get the mingw-w64 code from Git and an Git-web viewer are available on SourceForge .","title":"Sources"},{"location":"downloads/#unsorted-complementary-list","text":"","title":"Unsorted complementary list"},{"location":"downloads/#darwinmac-os-x","text":"The existing Darwin binaries have been built through buildbot in 2013 and links to them can be found on the dedicated page .","title":"Darwin/Mac OS X"},{"location":"downloads/#opensuse","text":"The OpenSUSE Linux distribution also has a large and well-maintained set of packages for cross-compilation.","title":"OpenSUSE"},{"location":"downloads/#rubenvb","text":"Rubenvb has built a number of toolchains including some for less common setups. They are split into two categories: toolchains targeting Win32 or Win64 .","title":"Rubenvb"},{"location":"downloads/#gcc-with-the-mcf-thread-model","text":"GCC with the MCF thread model is a series of x86 and x64 native toolchains built by LH_Mouse. The MCF thread model involves the mcfgthread library to provide minimum yet complete C++11 thread support. Disregarding POSIX or Windows XP compatibility, it implements (hopefully the most) efficient mutexes and condition variables that are competitive with even native slim reader/write (SRW) locks and condition variables since Windows Vista.","title":"GCC with the MCF thread model"},{"location":"downloads/#store-of-binaries-on-sourceforge","text":"A very large number of other binaries and sources are hosted in the File Release System on Sourceforge which might have what you are after.","title":"Store of binaries on SourceForge"},{"location":"support/","text":"Support Mingw-w64 has several active support channels. Mailing-List #mingw-w64 IRC channel on irc.oftc.net Discussion Forum Issue Tracker Licensing Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. The ReactOS and Wine logos used on the website are licensed under the GPLv2 .","title":"Support"},{"location":"support/#support","text":"Mingw-w64 has several active support channels. Mailing-List #mingw-w64 IRC channel on irc.oftc.net Discussion Forum Issue Tracker","title":"Support"},{"location":"support/#licensing","text":"Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. The ReactOS and Wine logos used on the website are licensed under the GPLv2 .","title":"Licensing"},{"location":"docs/configure/","text":"Notable Configure Options This page list notable options when building mingw-w64 from source Headers --enable-secure-api - Allows the use of *_s by default --with-default-win32-winnt - sets the default _WINT32_WINNT value, defaults to 0x502. Do not change if you do not understand the implications. --enable-sdk=ARG - Option to install DirectX SDK (directx) and Device Driver SDK (ddk). CRT --enable-experimental - Enable 128-bit and decimal float printf","title":"Notable Configure Options"},{"location":"docs/configure/#notable-configure-options","text":"This page list notable options when building mingw-w64 from source","title":"Notable Configure Options"},{"location":"docs/configure/#headers","text":"--enable-secure-api - Allows the use of *_s by default --with-default-win32-winnt - sets the default _WINT32_WINNT value, defaults to 0x502. Do not change if you do not understand the implications. --enable-sdk=ARG - Option to install DirectX SDK (directx) and Device Driver SDK (ddk).","title":"Headers"},{"location":"docs/configure/#crt","text":"--enable-experimental - Enable 128-bit and decimal float printf","title":"CRT"},{"location":"docs/overview/","text":"Overview Most of the documentation is still on sf.net's own wiki . The main pages of interest are probably: History of the project FAQ libmangle gendef","title":"Overview"},{"location":"docs/overview/#overview","text":"Most of the documentation is still on sf.net's own wiki . The main pages of interest are probably: History of the project FAQ libmangle gendef","title":"Overview"}]}